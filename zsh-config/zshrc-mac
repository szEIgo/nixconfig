# Locale settings
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8


# Function to check Homebrew updates with a delay (macOS compatible)
brew_update_check() {
  local last_check_file="$HOME/.brew_last_update_check"
  local check_interval=$((60 * 60 * 24)) # 1 day in seconds

  if [[ -f "$last_check_file" ]]; then
    local last_check=$(stat -f "%m" "$last_check_file") # macOS stat format
    local now=$(date +%s)
    local elapsed=$((now - last_check))

    if [[ "$elapsed" -lt "$check_interval" ]]; then
      return # Skip check if not enough time has passed
    fi
  fi

  # Perform the brew update check
  brew update > /dev/null 2>&1
  touch "$last_check_file"

  # Check for outdated packages and notify if any
  local outdated=$(brew outdated)
  if [[ -n "$outdated" ]]; then
    echo "Homebrew: Packages are outdated. Run 'brew upgrade'."
  fi
}

# Run the update check in the background after a short delay
brew_update_check 

ssh_session() {
	if [ -z "$SSH_AUTH_SOCK" ]; then
	  eval $(ssh-agent -s)
	fi

	if ! ssh-add -l &>/dev/null; then
    	  ssh-add ~/.ssh/id_ecdsa &>/dev/null
	fi
}

# Add Cargo and custom paths
export PATH="$HOME/.cargo/bin:$PATH"
export ZSH="$HOME/.oh-my-zsh"
HIST_STAMPS="mm/dd/yyyy"

# Zsh plugins
plugins=(git argocd aws battery brew catimg docker colorize colored-man-pages cp history iterm2 kubectl podman postgres qrcode redis-cli rust scala spring sudo terraform xcode zoxide)

# Zsh theme
ZSH_THEME="powerlevel10k/powerlevel10k"

# SSH Keychain management - Ensure the key is added automatically on startup
eval `keychain --eval --quiet --quick --noask --agents "ssh" --timeout 30 ~/.ssh/id_ecdsa`

# Finder function to open Finder from terminal
finder() {
  if [ -z "$1" ]; then
    # If no argument is passed, open Finder in the current directory
    open -a "Finder" .
  else
    # If a path is provided, open Finder at that path
    open -a "Finder" "$1"
  fi
}
dolphin () {
   finder "$*"
}

ssh () {
  ssh_session
  command ssh -X -CY -o ServerAliveInterval=120 $*
}
scp () {
   ssh_session
   command scp -C -v -r -o StrictHostKeyChecking=no $*
}
git () {
   ssh_session
   command git $*
}


# Source Oh-My-Zsh
source $ZSH/oh-my-zsh.sh

# Set architecture flags
export ARCHFLAGS="-arch $(uname -m)"

# Share history
setopt SHARE_HISTORY
fpath=(~/.zsh/completion $fpath)

# Load Powerlevel10k theme if available
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# SDKMAN setup
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
source $HOME/.sdkman/bin/sdkman-init.sh

alias l='exa --icons'
alias la='exa --icons -a'
alias ll='exa --icons -lah'
alias ls='exa --icons --color=auto'

#remote
alias sw_debian='ssh -J bastion@51.158.121.209:61000 root@172.16.16.5'
alias sw_ubuntu='ssh -J bastion@51.15.132.29:61000 root@172.16.4.2'

# Key bindings for navigation
bindkey "^[[3~" delete-char
bindkey "^[[5~" beginning-of-buffer-or-history
bindkey "^[[6~" end-of-buffer-or-history
bindkey -M emacs '^[[3;5~' kill-word
bindkey '^H' backward-kill-word
bindkey  "^[[3~"  delete-char
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
bindkey "^[[1;3C" forward-word
bindkey "^[[1;3D" backward-word
bindkey '^[[1~' beginning-of-line
bindkey '^[[4~' end-of-line

function idea() {
   nohup "/Applications/Intellij IDEA.app/Contents/MacOS/idea" "$@" > /dev/null 2>&1 &
}

function scw(){
        docker run -i --net=host -v /Users/joni/.config/scw:/root/.config/scw --rm scaleway/cli:latest $@

}

alias scaleway=scw

function repeat() {
    local interval count cmd sleep_time
    case $1 in
        (*ms|*s)
            interval=$1
            shift
            [[ $1 =~ ^[0-9]+$ ]] && { count=$1; shift } || count=-1
            cmd=$@ ;;
        ([0-9]##)
            count=$1
            shift
            cmd=$@ ;;
        (*)
            interval=1s
            count=-1
            cmd=$@ ;;
    esac

    [[ $interval =~ ms$ ]] && sleep_time=$(( ${interval%ms}/1000.0 )) || sleep_time=${interval%s}
    
    if (( count == -1 )); then
        while eval $cmd; do sleep $sleep_time; done
    else
        for ((i=1; i<=$count; i++)); do
            eval $cmd
            (( i < count )) && sleep $sleep_time
        done
    fi
}

# bun completions
[ -s "/Users/joni/.bun/_bun" ] && source "/Users/joni/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
