if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
plugins=(git argocd aws battery catimg docker colorize colored-man-pages cp history kubectl podman postgres qrcode redis-cli rust scala spring sudo terraform zoxide gitignore zsh-syntax-highlighting zsh-autosuggestions mvn) 
export TERM=xterm-256color
eval $(ssh-agent -s)
export HOSTNAME="alarm"
export DOCKER_CONFIG=/home/joni/.config/docker
#oh-my-zsh
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"
source $ZSH/oh-my-zsh.sh
HIST_STAMPS="mm/dd/yyyy"
export ARCHFLAGS="-arch $(uname -m)"
setopt SHARE_HISTORY
export LC_CTYPE="en_US.UTF-8"
export PATH="/usr/bin:$PATH"
alias SSH_ASKPASS=ksshaskpass ssh-add < /dev/null
#SDKMAN
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
if [ -f ~/.keychain/${HOSTNAME}-zsh ]; then
    source ~/.keychain/${HOSTNAME}-zsh
fi
# Source SSH agent details if available
if [ -f /tmp/ssh-agent.env ]; then
    source /tmp/ssh-agent.env
fi

eval $(keychain --eval --noask --agents "ssh,gpg" --timeout 240 id_ecdsa
if [ -n "$SSH_AUTH_SOCK" ]; then
    echo "export SSH_AUTH_SOCK=$SSH_AUTH_SOCK" > /tmp/ssh-agent.env
fi)
function tmux(){
	 command byobu $*
}

function idea() {
    nohup /opt/idea/bin/idea.sh "$@" > /dev/null 2>&1 &
}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

POWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD=true
eval "$(zoxide init zsh)"

if [ -e /home/joni/.nix-profile/etc/profile.d/nix.sh ]; then . /home/joni/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer
function ssh () {
	keychain
	command ssh -X -CY -o ServerAliveInterval=120 $*
}

function git () {
	GIT_DISCOVERY_ACROSS_FILESYSTEM=1
	keychain
	command git $*
}
function runX() {
    local count=$1
    shift # Shift the first argument so $@ contains the command
    local command="$@"

    for i in $(seq 1 "$count"); do
        eval "${command//\$i/$i}" # Replace  $i with the current iteration number
    done
}
if [ -n "${TMUX}" ]; then
    eval "$(tmux show-environment -s)"
fi
function tmux_with_agent() {
    # Ensure SSH agent environment variables are available inside tmux
    if [ -n "$SSH_AUTH_SOCK" ]; then
        tmux set-environment -g SSH_AUTH_SOCK "$SSH_AUTH_SOCK"
    fi
    if [ -n "$SSH_AGENT_PID" ]; then
        tmux set-environment -g SSH_AGENT_PID "$SSH_AGENT_PID"
    fi

    # Unset TMUX to avoid nesting tmux sessions
    unset TMUX

    # Now run tmux as normal
    tmux "$@"
}

function detach() {
    if [ -z "$1" ]; then
        echo "Usage: detach <session_name> <command>"
        return 1
    fi

    local session_name=$1
    shift
    local cmd=$@

    # Generate a unique identifier (UID) based on the current timestamp
    local uid=$(date +%s%N)

    # Combine the session name with the UID
    local full_session_name="${session_name}_${uid}"

    # Unset TMUX to avoid nested tmux sessions
    unset TMUX

    # Export SSH agent environment variables to tmux
    if [ -n "$SSH_AUTH_SOCK" ]; then
        tmux set-environment -g SSH_AUTH_SOCK "$SSH_AUTH_SOCK"
    fi

    if [ -n "$SSH_AGENT_PID" ]; then
        tmux set-environment -g SSH_AGENT_PID "$SSH_AGENT_PID"
    fi

    # Create the tmux session with the UID in detached mode
    tmux new-session -d -s "$full_session_name" "$cmd"

    if [ $? -eq 0 ]; then
        echo "Detached session '$full_session_name' running: $cmd"
    else
        echo "Failed to start detached session."
    fi
}

 
 

alias l='exa --icons'
alias la='exa --icons -a'
alias ll='exa --icons -lah'
alias ls='exa --icons --color=auto'

function mothership()  {
 ssh -X root@192.168.2.64
}
function nuc() {
 ssh -X -p 666 root@192.168.2.102
}
function lenovo() {
 ssh -X root@192.168.2.87
}
export LC_ALL="en_US.UTF-8"


bindkey "^[[3~" delete-char
bindkey "^[[5~" beginning-of-buffer-or-history
bindkey "^[[6~" end-of-buffer-or-history
bindkey -M emacs '^[[3;5~' kill-word
bindkey '^H' backward-kill-word
bindkey  "^[[3~"  delete-char
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
bindkey "^[[1;3C" forward-word
bindkey "^[[1;3D" backward-word
bindkey '^[[1~' beginning-of-line
bindkey '^[[4~' end-of-line

function scw(){
	docker run -i --net=host -v /home/joni/.config/scw:/root/.config/scw --rm scaleway/cli:latest $@

}


# add Pulumi to the PATH
export PATH=$PATH:/home/joni/.pulumi/bin

# Created by `pipx` on 2024-12-18 12:06:22
export PATH="$PATH:/home/joni/.local/bin"
